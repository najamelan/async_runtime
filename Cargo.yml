package:

  # When releasing to crates.io:
  #
  # - Update CHANGELOG.md.
  # - Update version numbers in Cargo.yml, Cargo.toml, install section of readme.
  # - verify CI result
  # - cargo publish
  # - merge dev branch into master
  # - create git tag
  #
  version      : 0.4.0
  name         : naja_async_runtime
  authors      : [ Naja Melan <najamelan@autistici.org> ]
  edition      : '2018'
  description  : A lightweight universal runtime for futures.
  repository   : https://github.com/najamelan/async_runtime
  license      : Unlicense
  categories   : [ concurrency, asynchronous ]
  keywords     : [ runtime, async, futures ]
  readme       : README.md
  autoexamples : false

  metadata:
    docs:
      rs:
        features: [ external_doc, juliex ]


lib:

  name: async_runtime


badges:

  travis-ci   : { repository: najamelan/async_runtime }
  maintenance : { status    : actively-developed      }


# Please see the readme for details.
#
features:

  # The `notwasm` feature only exists so that cargo test doesn't try to compile the examples when testing
  # wasm.
  #
  default   : [ notwasm ]
  macros    : [ naja_runtime_macros ]

  # Enables the juliex threadpool executor. Not available on WASM.
  #
  juliex    : [ juliex_crate ]

  # Enables the async-std task executor. Not available on WASM.
  #
  async_std : [ async_std_crate ]

  # Enables the tokio current_thread executor. Not available on WASM.
  # This will pull network dependencies. There is no way in tokio to turn that off.
  #
  tokio_ct  : [ tokio ]

  # Enables futures::executor::LocalPool. If no other executors are enabled, this one will be enabled
  # by default. Not available on WASM. This is provided by the futures library on which we depend anyways,
  # so enabling this will not pull in extra dependencies.
  #
  localpool : []

  # Enables the wasm-bindgen-futures executor. Only available on WASM. If no other executors are enabled
  # this will be enabled by default. Currently the only executor available on WASM, so it makes no sense
  # for it not to be enabled, and it's providing dependency wasm-bindgen-futures will always be compiled
  # in.
  #
  bindgen   : [ wasm-bindgen-futures ]

  # only used internally, don't use
  #
  notwasm: []

  # only used internally, don't use
  #
  external_doc: []


dependencies:

  naja_runtime_macros : { path: macros, optional: true                                                          }
  futures             : { version: ^0.3        , features: [std, thread-pool], default-features: false          }
  once_cell           : { version: ^0.2        , default-features: false                                        }
  juliex_crate        : { version: ^0.3.0-alpha, optional: true, package: juliex                                }
  async_std_crate     : { version: ^0.99       , optional: true, package: async-std                             }
  tokio               : { version: ^0.2.0-alpha, optional: true, default-features: false, features: [ rt-full ] }

  # necessary for the crate to compile for `cargo doc`
  #
  wasm-bindgen-futures: { version: ^0.4, optional: true }

dev-dependencies:

  pretty_assertions : ^0.6

  # log               : ^0.4
  # flexi_logger      : ^0.11


profile:

  release:

    codegen-units: 1
    # debug        : true


example:

  - name             : attribute
    path             : examples/attribute.rs
    required-features: [ notwasm, macros, localpool ]

  - name             : localpool
    path             : examples/localpool.rs
    required-features: [ notwasm, macros, localpool ]

  - name             : juliex
    path             : examples/juliex.rs
    required-features: [ notwasm, juliex, macros ]

  - name             : async-file
    path             : examples/async-file.rs
    required-features: [ notwasm, localpool, macros ]

  - name             : handle
    path             : examples/handle.rs
    required-features: [ notwasm, localpool, macros ]


target:

  'cfg(not( target_arch = "wasm32" ))':

    dev-dependencies:

      async_std_crate: { version: ^0.99, package: async-std }


  'cfg(target_arch = "wasm32")':

    dependencies:

      wasm-bindgen-futures: { version: ^0.4 }

    dev-dependencies:

      wasm-bindgen-test: ^0.3


