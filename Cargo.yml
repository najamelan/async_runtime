package:

  # When releasing to crates.io:
  #
  # - Update CHANGELOG.md.
  # - Update version numbers in install section of readme.
  # - merge dev branch into master
  # - create git tag
  #
  version      : 0.4.0
  name         : naja_async_runtime
  authors      : [ Naja Melan <najamelan@autistici.org> ]
  edition      : '2018'
  description  : A lightweight universal runtime for futures.
  repository   : https://github.com/najamelan/async_runtime
  license      : Unlicense
  categories   : [ concurrency, asynchronous ]
  keywords     : [ runtime, async, futures ]
  readme       : README.md
  autoexamples : false
  build        : build.rs

  metadata:
    docs:
      rs:
        features: [ external_doc, juliex ]


lib:

  name: async_runtime


badges:

  travis-ci   : { repository: najamelan/async_runtime }
  maintenance : { status    : actively-developed      }


# Currently features are used to enable only those executors the application dev wants to use. If you are a library
# developer, you should not set or disable any features when depending on async_runtime. For your tests and examples
# (dev-dependencies) you are considered the application developer, so setup async_runtime as documented below.
#
# As application developer, use features to enable the executors you want to use. Note that some executors are platform
# specific. If you set no features at all, by default on wasm, the `bindgen` feature will be enabled for you and on
# a non-wasm platform the `localpool`. If you don't want to spawn futures, but you depend on a library that uses
# `rt::spawn`, you don't even need to specify async_runtime as a dependency, since it will work just fine with the
# default executors mentioned above.
#
# You can specify other executors you want to use. Currently supported is `juliex` and `futures-threadpool`. In
# general if you want to use a threadpool, use juliex as the futures threadpool is not as performant. Once inside
# a worker thread of a threadpool, any further spawned futures will go to the same threadpool. You don't have to
# initialize an executor on working threads, only on threads you create.
#
# On any threads you create, if `rt::spawn` is called (even by a dependency) before you manually set an executor
# for the thread, the default executors will be used for that thread (localpool or bindgen, depending on the target
# platform). Once set, the executor for a thread cannot be changed.
#
features:

  default   : [ macros ]
  macros    : [ naja_runtime_macros ]

  # Enables the juliex threadpool executor. Not available on WASM.
  #
  juliex    : [ juliex_crate ]

  # Enables futures::executor::LocalPool. If no other executors are enabled, this one will be enabled
  # by default. Not available on WASM. This is provided by the futures library on which we depend anyways,
  # so enabling this will not pull in extra dependencies.
  #
  localpool : []

  # Enables the wasm-bindgen-futures executor. Only available on WASM. If no other executors are enabled
  # this will be enabled by default. Currently the only executor available on WASM, so it makes no sense
  # for it not to be enabled, and it's providing dependency wasm-bindgen-futures will always be compiled
  # in.
  #
  bindgen   : []

  # only used internally, don't use
  #
  notwasm: []

  # only used internally, don't use
  #
  external_doc: []


dependencies:

  futures-preview     : { version: ^0.3.0-alpha, features: [std], default-features: false }
  once_cell           : { version: ^0.1, default-features: false }
  juliex_crate        : { version: ^0.3.0-alpha, optional: true, package: juliex }
  naja_runtime_macros : { path: macros, optional: true }


dev-dependencies:

  pretty_assertions : ^0.6
  # log               : ^0.4
  # flexi_logger      : ^0.11


profile:

  release:

    codegen-units: 1
    # debug        : true


example:

  - name             : attribute
    path             : examples/attribute.rs
    required-features: [ notwasm ]

  - name             : localpool
    path             : examples/localpool.rs
    required-features: [ notwasm ]

  - name             : juliex
    path             : examples/juliex.rs
    required-features: [ notwasm, juliex ]


target:

  'cfg(target_arch = "wasm32")':

    dependencies:

      wasm-bindgen-futures: { version: ^0.4 }

    dev-dependencies:

      wasm-bindgen-test: ^0.3


